function strmview(ch,intv,plotScheme)
% ** function strmview(ch,intv,plotScheme)
% standalone 'stream viewer' for data streams as generated by rmouse. Needs DS and AP as
% global vars in the workspace
% ch          channels (cell array)
% intv        time interval (s)
% plotScheme  0: for each channel separately, all streams in parallel and scaled to 
%                uniform max amplitude 


global DS AP WP

if nargin<3
  plotScheme=3;
end

labelscale('fontSz',10,'scaleFac',1.0,'lineW',.25,'markSz',4); 
rmouse_ini;
rmouse_apcheck;
rawCh=rmouse_chan;

nCh=length(ch);
% local indices to channels
chInd=[];
for i=1:nCh
  chInd=[chInd strmatch(ch{i},AP.rawChAnNm,'exact')];
end
if isempty(chInd), error('check channel names'); end

% the stream types to be plotted (in case they exist)
strmType={'sansDelta','theta','thetaEnv','gamma','gammaEnv','ripple','rippleEnv'};
nStrms=length(strmType);

if isempty(strfind(DS.dpath,':')), DS.dpath=[WP.rootPath DS.dpath]; end
if isempty(strfind(AP.strmDir,':')), AP.strmDir=[WP.rootPath AP.strmDir]; end

% generate one var for each stream, this is most flexible for all sorts of plots,
% including pllplot overlays
strmTypeExist=zeros(1,nStrms);
for ci=length(chInd):-1:1
  % start by loading abf file, thus obtaining si
  if ci==length(chInd)
    if exist([DS.dpath '\' DS.abfFn '.mat'],'file')
      [rawD,si]=matDload([DS.dpath '\' DS.abfFn '.mat'],'start',intv(1),'stop',intv(2),'channels',ch);
    else
      [rawD,si]=abfload([DS.dpath '\' DS.abfFn '.abf'],'start',intv(1),'stop',intv(2),'channels',ch);        
    end
    if DS.rawSignalInverted
      rawD=-1*rawD;
    end
    intvPts=cont2discrete(intv*1e6,si,'intv',1);
  end
  for stIx=1:length(strmType)
    eval(['fNm=[AP.strmDir ''\'' rawCh(chInd(ci)).' strmType{stIx} 'Fn];']);
    if exist(fNm,'file')
      eval([strmType{stIx} 'D(:,ci)=strmread([AP.strmDir ''\'' rawCh(chInd(ci)).' strmType{stIx} 'Fn],''intv'',intvPts,''verbose'',0);' ]);
      strmTypeExist(stIx)=1;
    end
  end
end

strmType=strmType(logical(strmTypeExist));
nStrms=length(strmType);
clear fNm strmTypeExist stIx 


switch plotScheme
  case 0
    % for each channel separately, all streams in parallel and scaled to 
    % uniform max amplitude 
    catString=['rawD(:,g) '];
    yScaleStr={'rawD'};
    for stIx=1:length(strmType)
      if isempty(strfind(strmType{stIx},'Env'))
        catString=[catString strmType{stIx} 'D(:,g) '];
        yScaleStr{end+1}=strmType{stIx};
      end
    end
    for g=1:nCh
      figure(g), clf;
      eval(['bigD=[' catString '];']);
      % pllplot(bigD,'si',si,'yscale',yScaleStr);
      pllplot(bigD,'si',si);
    end
 
  case 1
    % specific number of streams of each channel overlaid
    figure(1), clf, hold on, orient landscape
    % raw data first
    [yl,dy]=pllplot(rawD,'si',si,'noscb',1);
    % streams next
    pllplot(thetaD,'si',si,'spacing','fixed','dy',dy,'ylim',yl,'noscb',1);
    % pllplot(thetaEnvD,'si',si,'spacing','fixed','dy',dy,'ylim',yl,'noscb',1);  
    % pllplot(gammaD,'si',si,'spacing','fixed','dy',dy,'ylim',yl,'noscb',1);
    pllplot(gammaEnvD,'si',si,'spacing','fixed','dy',dy,'ylim',yl,'noscb',1);    
    % pllplot(deltaD,'si',si,'spacing','fixed','dy',dy,'ylim',yl,'noscb',1);    
    % pllplot(ripple,'si',si,'spacing','fixed','dy',dy,'ylim',yl,'noscb',0);
    % different colors for different streams
    c=get(gca,'children');
    % first plot==last child. So, leaving raw data black..
    set(c(end-2*nCh+1:end-1*nCh),'color','b');
    set(c(end-3*nCh+1:end-2*nCh),'color','r');    
    %     set(c(end-4*nCh+1:end-3*nCh),'color','c');
    %     set(c(end-5*nCh+1:end-4*nCh),'color','m');
    %     set(c(end-6*nCh+1:end-5*nCh),'color','g');

  case 2
    % each stream type in a separate figure window
    figure(1), clf, orient landscape
    pllplot(rawD,'si',si);
    title('raw','fontsize',16,'fontweight','bold');    
    for i=1:nStrms
      figure(i+1), clf, orient landscape
      eval(['pllplot(' strmType{i} 'D,''si'',si);']);
      title(strmType{i},'fontsize',16,'fontweight','bold');
    end

  case 3
    figCount=1;
    % streams with corresponding envelope overlaid; raw with delta overlaid
    figure(figCount), clf, hold on, orient landscape
    [yl,dy]=pllplot(rawD,'si',si,'noscb',1);
    if any(ismember(strmType,'sansDeltaD'))
      pllplot(sansDeltaD,'si',si,'spacing','fixed','dy',dy,'ylim',yl);
      % different color for raw
      c=get(gca,'children');
      % first plot==last child. So, leaving sansDelta black..
      set(c(end-1*nCh+1:end-0*nCh),'color',[.6 .6 1]); %[.5 .8 .5] [.1 .6 .05]
    end
    title('raw & sans-{\delta}','fontsize',16,'fontweight','bold');

    % thetaD
    figCount=figCount+1;
    figure(figCount), clf, hold on, orient landscape   
    [yl,dy]=pllplot(thetaD,'si',si,'noscb',1);
    if any(ismember(strmType,'sansDeltaD'))
      pllplot(thetaEnvD,'si',si,'spacing','fixed','dy',dy,'ylim',yl);
      % different color for stream proper
      c=get(gca,'children');
      % first plot==last child. So, leaving enevelope black..
      set(c(end-1*nCh+1:end-0*nCh),'color',[.7 .3 1]);
    end
    title('{\theta}','fontsize',16,'fontweight','bold');

    % theta hi
    if any(ismember(strmType,'thetaHi'))
      figCount=figCount+1;
      figure(figCount), clf, hold on, orient landscape
      [yl,dy]=pllplot(thetaHiD,'si',si,'noscb',1);
      pllplot(thetaHiEnvD,'si',si,'spacing','fixed','dy',dy,'ylim',yl);
      % different color for stream proper
      c=get(gca,'children');
      % first plot==last child. So, leaving enevelope black..
      set(c(end-1*nCh+1:end-0*nCh),'color',[.7 .3 1]);
      title('{\theta} hi','fontsize',16,'fontweight','bold');
    end

    % gamma
    figCount=figCount+1;
    figure(figCount), clf, hold on, orient landscape   
    [yl,dy]=pllplot(gammaD,'si',si,'noscb',1);
    pllplot(gammaEnvD,'si',si,'spacing','fixed','dy',dy,'ylim',yl);    
    % different color for stream proper
    c=get(gca,'children');
    % first plot==last child. So, leaving enevelope black..
    set(c(end-1*nCh+1:end-0*nCh),'color',[.7 .3 1]);
    title('{\gamma}','fontsize',16,'fontweight','bold');

    % ripple
    if any(ismember(strmType,'ripple'))
      figCount=figCount+1;
      figure(figCount), clf, hold on, orient landscape
      [yl,dy]=pllplot(rippleD,'si',si,'noscb',1);
      if any(ismember(strmType,'rippleEnv'))
        pllplot(rippleEnvD,'si',si,'spacing','fixed','dy',dy,'ylim',yl);
        % different color for stream proper
        c=get(gca,'children');
        % first plot==last child. So, leaving enevelope black..
        set(c(end-1*nCh+1:end-0*nCh),'color',[.7 .3 1]);
      end
      title('ripple','fontsize',16,'fontweight','bold');
    end
end
  


% counterpart to strmwrite
function d=strmread(varargin)
global DS
d=i16load(varargin{:})/2^15*DS.nsRng;

% loads neural data stored in matfiles (mimicks behavior of abfload)
function [d,si]=matDload(fn,varargin)
% defaults   
start=0.0;
stop='e';
channels={' '};
pvpmod(varargin);
if strcmpi(channels,'a'),
  error('loading neural data from matfile: channel names must be given explicitly (probably AP.rawChAnNm is the problem)');
end
% load abfi
load(fn,'abfi');
% --- deal with start & stop times
ix(1)=cont2discrete(start*1e6,abfi.si,'intv',0);
if strcmpi(stop,'e')
  ix(2)=abfi.dataPtsPerChan;
else
  ix(2)=cont2discrete(stop*1e6,abfi.si,'intv',1);
end
% ---- load the crap
% preallocate
d=repmat(nan,diff(ix)+1,length(channels));
for chInd=1:length(channels)
  % channel names must be deblanked
  dbch=channels{chInd};
  dbch=dbch(~(int16(dbch)==32));
  load(fn,dbch);
  eval(['d(:,chInd)=double(' dbch '(ix(1):ix(2),:));']);
  eval(['clear ' dbch ';']);
end
si=abfi.si;
